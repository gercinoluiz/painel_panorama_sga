generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_CASA_VERDE")
}

model atend_codif {
  atendimento_id BigInt @default(autoincrement())
  servico_id     Int
  valor_peso     Int    @db.SmallInt

  @@id([atendimento_id, servico_id])
  @@index([servico_id], map: "atend_codif_ibfk_2")
}

model atend_meta {
  atendimento_id BigInt
  name           String  @db.VarChar(50)
  value          String? @db.Text

  @@id([atendimento_id, name])
}

model atendimentos {
  id             BigInt    @id @default(autoincrement())
  unidade_id     Int
  usuario_id     Int?
  usuario_tri_id Int
  servico_id     Int
  prioridade_id  Int
  atendimento_id BigInt?
  status         Int       @db.SmallInt
  sigla_senha    String    @db.VarChar(1)
  num_senha      Int
  num_senha_serv Int
  nm_cli         String?   @db.VarChar(100)
  num_local      Int       @db.SmallInt
  dt_cheg        DateTime  @db.DateTime(0)
  dt_cha         DateTime? @db.DateTime(0)
  dt_ini         DateTime? @db.DateTime(0)
  dt_fim         DateTime? @db.DateTime(0)
  ident_cli      String?   @db.VarChar(11)

  @@index([prioridade_id], map: "atendimentos_ibfk_1")
  @@index([unidade_id, servico_id], map: "atendimentos_ibfk_2")
  @@index([usuario_id], map: "atendimentos_ibfk_4")
  @@index([usuario_tri_id], map: "atendimentos_ibfk_5")
  @@index([atendimento_id], map: "atendimentos_ibfk_6")
  @@index([status], map: "fki_atendimentos_ibfk_3")
}

model cargos {
  id              Int               @id @default(autoincrement())
  nome            String            @db.VarChar(50)
  descricao       String            @db.VarChar(150)
  esquerda        Int
  direita         Int
  nivel           Int
  cargos_mod_perm cargos_mod_perm[]
  usu_grup_cargo  usu_grup_cargo[]
}

model cargos_mod_perm {
  cargo_id  Int
  modulo_id Int
  permissao Int
  cargos    cargos  @relation(fields: [cargo_id], references: [id], onUpdate: Restrict, map: "cargos_mod_perm_ibfk_1")
  modulos   modulos @relation(fields: [modulo_id], references: [id], onUpdate: Restrict, map: "cargos_mod_perm_ibfk_2")

  @@id([cargo_id, modulo_id])
  @@index([modulo_id], map: "cargos_mod_perm_ibfk_2")
}

model config {
  chave String @id @db.VarChar(150)
  valor String @db.Text
  tipo  Int
}

model contador {
  unidade_id Int      @id
  total      Int      @default(0)
  unidades   unidades @relation(fields: [unidade_id], references: [id], onUpdate: Restrict, map: "contador_ibfk_1")
}

model grupos {
  id             Int              @id @default(autoincrement())
  nome           String           @db.VarChar(50)
  descricao      String           @db.VarChar(150)
  esquerda       Int
  direita        Int
  nivel          Int
  unidades       unidades[]
  usu_grup_cargo usu_grup_cargo[]

  @@index([direita], map: "direita")
  @@index([esquerda, direita], map: "esqdir")
  @@index([esquerda], map: "esquerda")
}

model historico_atend_codif {
  atendimento_id BigInt
  servico_id     Int
  valor_peso     Int    @db.SmallInt

  @@id([atendimento_id, servico_id])
  @@index([servico_id], map: "historico_atend_codif_ibfk_2")
}

model historico_atend_meta {
  atendimento_id BigInt
  name           String  @db.VarChar(50)
  value          String? @db.Text

  @@id([atendimento_id, name])
}

model historico_atendimentos {
  id             BigInt    @id
  unidade_id     Int?
  usuario_id     Int?
  usuario_tri_id Int
  servico_id     Int
  prioridade_id  Int
  atendimento_id BigInt?
  status         Int
  sigla_senha    String    @db.VarChar(1)
  num_senha      Int
  num_senha_serv Int
  nm_cli         String?   @db.VarChar(100)
  num_local      Int       @db.SmallInt
  dt_cheg        DateTime  @db.DateTime(0)
  dt_cha         DateTime? @db.DateTime(0)
  dt_ini         DateTime? @db.DateTime(0)
  dt_fim         DateTime? @db.DateTime(0)
  ident_cli      String?   @db.VarChar(11)

  @@index([prioridade_id], map: "historico_atendimentos_ibfk_1")
  @@index([unidade_id, servico_id], map: "historico_atendimentos_ibfk_2")
  @@index([usuario_id], map: "historico_atendimentos_ibfk_4")
  @@index([usuario_tri_id], map: "historico_atendimentos_ibfk_5")
  @@index([atendimento_id], map: "historico_atendimentos_ibfk_6")
}

model locais {
  id       Int        @id @default(autoincrement())
  nome     String     @unique(map: "local_serv_nm") @db.VarChar(20)
  uni_serv uni_serv[]
}

model modulos {
  id              Int               @id @default(autoincrement())
  chave           String            @unique(map: "modulos_chave") @db.VarChar(50)
  nome            String            @db.VarChar(25)
  descricao       String            @db.VarChar(100)
  tipo            Int               @db.SmallInt
  status          Int               @db.SmallInt
  cargos_mod_perm cargos_mod_perm[]
}

model oauth_access_tokens {
  access_token String   @id @db.VarChar(40)
  client_id    String   @db.VarChar(80)
  user_id      String?  @db.VarChar(255)
  expires      DateTime @default(now()) @db.Timestamp(0)
  scope        String?  @db.VarChar(2000)
}

model oauth_clients {
  client_id     String  @id @db.VarChar(80)
  client_secret String  @db.VarChar(80)
  redirect_uri  String  @db.VarChar(2000)
  grant_types   String? @db.VarChar(80)
  scope         String? @db.VarChar(100)
  user_id       String? @db.VarChar(80)
}

model oauth_refresh_tokens {
  refresh_token String   @id @db.VarChar(40)
  client_id     String   @db.VarChar(80)
  user_id       String?  @db.VarChar(255)
  expires       DateTime @default(now()) @db.Timestamp(0)
  scope         String?  @db.VarChar(2000)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model oauth_scopes {
  scope      String?  @db.Text
  is_default Boolean?

  @@ignore
}

model paineis {
  unidade_id       Int
  host             Int                @id
  unidades         unidades           @relation(fields: [unidade_id], references: [id], onUpdate: Restrict, map: "paineis_ibfk_1")
  paineis_servicos paineis_servicos[]

  @@index([unidade_id], map: "paineis_ibfk_1")
}

model paineis_servicos {
  host       Int
  unidade_id Int
  servico_id Int
  paineis    paineis  @relation(fields: [host], references: [host], onUpdate: Restrict, map: "paineis_servicos_ibfk_1")
  uni_serv   uni_serv @relation(fields: [unidade_id, servico_id], references: [unidade_id, servico_id], onUpdate: Restrict, map: "paineis_servicos_ibfk_2")

  @@id([host, servico_id])
  @@index([unidade_id, servico_id], map: "paineis_servicos_ibfk_2")
}

model painel_senha {
  id                Int      @id @default(autoincrement())
  unidade_id        Int
  servico_id        Int
  num_senha         Int
  sig_senha         String   @db.VarChar(1)
  msg_senha         String   @db.VarChar(20)
  local             String   @db.VarChar(15)
  num_local         Int      @db.SmallInt
  peso              Int      @db.SmallInt
  prioridade        String?  @db.VarChar(100)
  nome_cliente      String?  @db.VarChar(100)
  documento_cliente String?  @db.VarChar(30)
  unidades          unidades @relation(fields: [unidade_id], references: [id], onUpdate: Restrict, map: "painel_senha_ibfk_1")
  servicos          servicos @relation(fields: [servico_id], references: [id], onUpdate: Restrict, map: "painel_senha_ibfk_2")

  @@index([unidade_id], map: "painel_senha_ibfk_1")
  @@index([servico_id], map: "painel_senha_ibfk_2")
}

model prioridades {
  id        Int    @id @default(autoincrement())
  nome      String @db.VarChar(64)
  descricao String @db.VarChar(100)
  peso      Int    @db.SmallInt
  status    Int    @db.SmallInt
}

model serv_meta {
  servico_id Int
  name       String  @db.VarChar(50)
  value      String? @db.Text

  @@id([servico_id, name])
}

model servicos {
  id             Int            @id @default(autoincrement())
  macro_id       Int?
  descricao      String         @db.VarChar(100)
  nome           String         @db.VarChar(50)
  status         Int            @db.SmallInt
  peso           Int            @db.SmallInt
  painel_senha   painel_senha[]
  servicos       servicos?      @relation("servicosToservicos", fields: [macro_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "servicos_ibfk_1")
  other_servicos servicos[]     @relation("servicosToservicos")
  uni_serv       uni_serv[]

  @@index([macro_id], map: "servicos_ibfk_1")
}

model uni_meta {
  unidade_id Int
  name       String  @db.VarChar(50)
  value      String? @db.Text

  @@id([unidade_id, name])
}

model uni_serv {
  unidade_id       Int
  servico_id       Int
  local_id         Int
  sigla            String             @db.VarChar(1)
  status           Int                @db.SmallInt
  peso             Int                @db.SmallInt
  paineis_servicos paineis_servicos[]
  unidades         unidades           @relation(fields: [unidade_id], references: [id], onUpdate: Restrict, map: "uni_serv_ibfk_1")
  servicos         servicos           @relation(fields: [servico_id], references: [id], onUpdate: Restrict, map: "uni_serv_ibfk_2")
  locais           locais             @relation(fields: [local_id], references: [id], onUpdate: Restrict, map: "uni_serv_ibfk_3")
  usu_serv         usu_serv[]

  @@id([unidade_id, servico_id])
  @@index([servico_id], map: "uni_serv_ibfk_2")
  @@index([local_id], map: "uni_serv_ibfk_3")
}

model unidades {
  id           Int            @id @default(autoincrement())
  grupo_id     Int
  codigo       String         @unique(map: "codigo") @db.VarChar(10)
  nome         String         @db.VarChar(50)
  status       Int            @db.SmallInt
  stat_imp     Int            @db.SmallInt
  msg_imp      String         @db.VarChar(100)
  contador     contador?
  paineis      paineis[]
  painel_senha painel_senha[]
  uni_serv     uni_serv[]
  grupos       grupos         @relation(fields: [grupo_id], references: [id], onUpdate: Restrict)

  @@index([grupo_id], map: "unidades_grupo_id_fkey")
}

model usu_grup_cargo {
  usuario_id Int
  grupo_id   Int
  cargo_id   Int
  usuarios   usuarios @relation(fields: [usuario_id], references: [id], onUpdate: Restrict, map: "usu_grup_cargo_ibfk_1")
  grupos     grupos   @relation(fields: [grupo_id], references: [id], onUpdate: Restrict, map: "usu_grup_cargo_ibfk_2")
  cargos     cargos   @relation(fields: [cargo_id], references: [id], onUpdate: Restrict, map: "usu_grup_cargo_ibfk_3")

  @@id([usuario_id, grupo_id])
  @@index([grupo_id], map: "usu_grup_cargo_ibfk_2")
  @@index([cargo_id], map: "usu_grup_cargo_ibfk_3")
}

model usu_meta {
  usuario_id Int
  name       String  @db.VarChar(50)
  value      String? @db.Text

  @@id([usuario_id, name])
}

model usu_serv {
  unidade_id Int
  servico_id Int
  usuario_id Int
  uni_serv   uni_serv @relation(fields: [servico_id, unidade_id], references: [servico_id, unidade_id], onUpdate: Restrict, map: "usu_serv_ibfk_1")
  usuarios   usuarios @relation(fields: [usuario_id], references: [id], onUpdate: Restrict, map: "usu_serv_ibfk_2")

  @@id([unidade_id, servico_id, usuario_id])
  @@index([servico_id, unidade_id], map: "usu_serv_ibfk_1")
  @@index([usuario_id], map: "usu_serv_ibfk_2")
}

model usuarios {
  id             Int              @id @default(autoincrement())
  login          String           @unique(map: "login") @db.VarChar(20)
  nome           String           @db.VarChar(20)
  sobrenome      String           @db.VarChar(100)
  senha          String           @db.VarChar(60)
  ult_acesso     DateTime?        @db.DateTime(0)
  status         Int              @db.SmallInt
  session_id     String?          @db.VarChar(50)
  usu_grup_cargo usu_grup_cargo[]
  usu_serv       usu_serv[]
}
